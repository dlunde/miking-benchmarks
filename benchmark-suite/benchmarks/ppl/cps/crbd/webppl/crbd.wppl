let tree = {type: 'node', left: {type: 'node', left: {type: 'node', left: {type: 'node', left: {type: 'leaf', age: 0.0}, right: {type: 'leaf', age: 0.0}, age: 5.635787971}, right: {type: 'node', left: {type: 'leaf', age: 0.0}, right: {type: 'node', left: {type: 'leaf', age: 0.0}, right: {type: 'node', left: {type: 'leaf', age: 0.0}, right: {type: 'leaf', age: 0.0}, age: 4.788021775}, age: 7.595901077}, age: 9.436625313}, age: 12.344087935000001}, right: {type: 'node', left: {type: 'node', left: {type: 'leaf', age: 0.0}, right: {type: 'node', left: {type: 'node', left: {type: 'leaf', age: 0.0}, right: {type: 'leaf', age: 0.0}, age: 3.934203877}, right: {type: 'node', left: {type: 'node', left: {type: 'leaf', age: 0.0}, right: {type: 'leaf', age: 0.0}, age: 3.151799953}, right: {type: 'node', left: {type: 'leaf', age: 0.0}, right: {type: 'leaf', age: 0.0}, age: 5.054547857}, age: 6.284896356999999}, age: 7.815689970999999}, age: 10.32243059}, right: {type: 'node', left: {type: 'leaf', age: 0.0}, right: {type: 'node', left: {type: 'node', left: {type: 'leaf', age: 0.0}, right: {type: 'node', left: {type: 'leaf', age: 0.0}, right: {type: 'leaf', age: 0.0}, age: 1.519406055}, age: 4.987038163}, right: {type: 'node', left: {type: 'leaf', age: 0.0}, right: {type: 'node', left: {type: 'node', left: {type: 'leaf', age: 0.0}, right: {type: 'leaf', age: 0.0}, age: 0.6302632958}, right: {type: 'node', left: {type: 'leaf', age: 0.0}, right: {type: 'node', left: {type: 'leaf', age: 0.0}, right: {type: 'leaf', age: 0.0}, age: 1.962579854}, age: 3.732932004}, age: 5.5933070698}, age: 6.096453021}, age: 8.265483252}, age: 10.86835485}, age: 12.551924091}, age: 13.472886809}, right: {type: 'node', left: {type: 'node', left: {type: 'node', left: {type: 'leaf', age: 0.0}, right: {type: 'node', left: {type: 'leaf', age: 0.0}, right: {type: 'leaf', age: 0.0}, age: 4.534421013}, age: 12.46869821}, right: {type: 'node', left: {type: 'leaf', age: 0.0}, right: {type: 'node', left: {type: 'leaf', age: 0.0}, right: {type: 'node', left: {type: 'leaf', age: 0.0}, right: {type: 'node', left: {type: 'leaf', age: 0.0}, right: {type: 'leaf', age: 0.0}, age: 6.306427821}, age: 9.40050129}, age: 13.85876825}, age: 20.68766993}, age: 22.82622451}, right: {type: 'node', left: {type: 'leaf', age: 0.0}, right: {type: 'node', left: {type: 'node', left: {type: 'leaf', age: 0.0}, right: {type: 'node', left: {type: 'leaf', age: 0.0}, right: {type: 'node', left: {type: 'leaf', age: 0.0}, right: {type: 'node', left: {type: 'leaf', age: 0.0}, right: {type: 'leaf', age: 0.0}, age: 4.220057646}, age: 8.451051062}, age: 11.54072627}, age: 15.28839572}, right: {type: 'node', left: {type: 'node', left: {type: 'node', left: {type: 'leaf', age: 0.0}, right: {type: 'leaf', age: 0.0}, age: 8.614086751}, right: {type: 'node', left: {type: 'leaf', age: 0.0}, right: {type: 'node', left: {type: 'leaf', age: 0.0}, right: {type: 'node', left: {type: 'leaf', age: 0.0}, right: {type: 'node', left: {type: 'node', left: {type: 'leaf', age: 0.0}, right: {type: 'leaf', age: 0.0}, age: 0.9841688636}, right: {type: 'node', left: {type: 'leaf', age: 0.0}, right: {type: 'leaf', age: 0.0}, age: 1.04896206}, age: 1.7140599232}, age: 3.786162534}, age: 8.788450495}, age: 11.05846217}, age: 15.008504768}, right: {type: 'node', left: {type: 'node', left: {type: 'leaf', age: 0.0}, right: {type: 'leaf', age: 0.0}, age: 11.15685875}, right: {type: 'node', left: {type: 'leaf', age: 0.0}, right: {type: 'node', left: {type: 'leaf', age: 0.0}, right: {type: 'node', left: {type: 'leaf', age: 0.0}, right: {type: 'node', left: {type: 'leaf', age: 0.0}, right: {type: 'node', left: {type: 'leaf', age: 0.0}, right: {type: 'leaf', age: 0.0}, age: 1.900561313}, age: 3.100150132}, age: 6.043650727}, age: 12.38252513}, age: 12.61785812}, age: 15.396725736}, age: 16.828404506}, age: 20.368109703000002}, age: 23.74299959}, age: 32.145876657}, age: 34.940139089}
let rho = 0.5684210526315789

let countLeaves = function(tree) {
    return tree.type == 'node'? countLeaves(tree.left) + countLeaves(tree.right): 1
}

let logFactorial = function(n) {
    return n == 1? 0: Math.log(n) + logFactorial(n - 1)
}

let model = function() {
    // Priors
    let lambda = gamma({shape: 1.0, scale: 1.0})
    let mu = gamma({shape: 1.0, scale: 0.5})

    let survives = function(tBeg) {
        let t = tBeg - exponential({a: lambda + mu})
        if (t < 0) {
            return flip(rho)
        }
        if (flip(lambda/(lambda + mu))) {
            return survives(t) || survives(t)
        }
        return false
    }

    let walk = function(node, parentAge) {
        let simHiddenSpeciation = function(tBeg) {
            let t = tBeg - exponential({a: lambda})
            if (t > node.age) {
                return survives(t)? -Infinity: Math.log(2) + simHiddenSpeciation(t)
            }
            return 0.
        }
        let score = simHiddenSpeciation(parentAge)
                  + Poisson({mu: mu*(parentAge - node.age)}).score(0)
        if (node.type == 'node') {
            factor(score + Exponential({'a': lambda}).score(0))
            walk(node.left, node.age)
            walk(node.right, node.age)
        } else {
            factor(score + Bernoulli({p: rho}).score(true))
        }
    }

    let numLeaves = countLeaves(tree)
    factor((numLeaves - 1)*Math.log(2) - logFactorial(numLeaves))
    walk(tree.left, tree.age)
    walk(tree.right, tree.age)
    return lambda
}

var dist = Infer({method: 'SMC', particles: 10000, model: model})
dist.normalizationConstant
